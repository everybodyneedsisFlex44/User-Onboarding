function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var merge$1 = _interopDefault(require('lodash/merge'));
var isNil = _interopDefault(require('lodash/isNil'));
var isObject = _interopDefault(require('lodash/isObject'));
var cloneDeep = _interopDefault(require('lodash/cloneDeep'));
var extend = _interopDefault(require('lodash/extend'));
var isUndefined = _interopDefault(require('lodash/isUndefined'));
var ObjectPath = _interopDefault(require('objectpath'));
var tv4 = _interopDefault(require('tv4'));
var notevil = _interopDefault(require('notevil'));
var TextField = _interopDefault(require('@material-ui/core/TextField'));
var FormLabel = _interopDefault(require('@material-ui/core/FormLabel'));
var FormHelperText = _interopDefault(require('@material-ui/core/FormHelperText'));
var ReactMde = _interopDefault(require('react-mde'));
var Showdown = require('showdown');
require('react-mde/lib/styles/css/react-mde-all.css');
var MenuItem = _interopDefault(require('@material-ui/core/MenuItem'));
var MuiSelect = _interopDefault(require('@material-ui/core/Select'));
var InputLabel = _interopDefault(require('@material-ui/core/InputLabel'));
var FormControl = _interopDefault(require('@material-ui/core/FormControl'));
var styles$4 = require('@material-ui/core/styles');
var Chip = _interopDefault(require('@material-ui/core/Chip'));
var FormControlLabel = _interopDefault(require('@material-ui/core/FormControlLabel'));
var RadioGroup = _interopDefault(require('@material-ui/core/RadioGroup'));
var Radio = _interopDefault(require('@material-ui/core/Radio'));
var Checkbox$1 = _interopDefault(require('@material-ui/core/Checkbox'));
var FormGroup = _interopDefault(require('@material-ui/core/FormGroup'));
var Typography = _interopDefault(require('@material-ui/core/Typography'));
var Button = _interopDefault(require('@material-ui/core/Button'));
var Card = _interopDefault(require('@material-ui/core/Card'));
var IconButton = _interopDefault(require('@material-ui/core/IconButton'));
var DeleteIcon = _interopDefault(require('@material-ui/icons/Close'));
var classNames = _interopDefault(require('classnames'));
var core = require('@material-ui/core');
var CheckboxTree = _interopDefault(require('react-checkbox-tree'));
require('react-checkbox-tree/lib/react-checkbox-tree.css');
var CheckBoxIcon = _interopDefault(require('@material-ui/icons/CheckBox'));
var CheckBoxOutlineBlankIcon = _interopDefault(require('@material-ui/icons/CheckBoxOutlineBlank'));
var IndeterminateCheckBoxIcon = _interopDefault(require('@material-ui/icons/IndeterminateCheckBox'));
var ChevronRightIcon = _interopDefault(require('@material-ui/icons/ChevronRight'));
var KeyboardArrowDownIcon = _interopDefault(require('@material-ui/icons/KeyboardArrowDown'));
var AddBoxIcon = _interopDefault(require('@material-ui/icons/AddBox'));
var FolderIcon = _interopDefault(require('@material-ui/icons/Folder'));
var FolderOpenIcon = _interopDefault(require('@material-ui/icons/FolderOpen'));
var InsertDriveFileIcon = _interopDefault(require('@material-ui/icons/InsertDriveFile'));
var Cookies = _interopDefault(require('universal-cookie'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var safeEval = function safeEval(condition, scope) {
  try {
    var scopeSafe = cloneDeep(scope);
    return notevil(condition, scopeSafe);
  } catch (error) {
    return undefined;
  }
};

var stripNullType = function stripNullType(type) {
  if (Array.isArray(type) && type.length === 2) {
    if (type[0] === 'null') return type[1];
    if (type[1] === 'null') return type[0];
  }

  return type;
};

var enumToTitleMap = function enumToTitleMap(enm) {
  var titleMap = [];
  enm.forEach(function (name) {
    titleMap.push({
      name: name,
      value: name
    });
  });
  return titleMap;
};

var canonicalTitleMap = function canonicalTitleMap(titleMap, originalEnum) {
  if (!originalEnum) return titleMap;
  var canonical = [];
  var enumValues = Object.keys(titleMap).length === 0 ? originalEnum : titleMap;
  originalEnum.forEach(function (value, idx) {
    canonical.push({
      name: enumValues[idx],
      value: value
    });
  });
  return canonical;
};

var stdFormObj = function stdFormObj(name, schema, options) {
  options = options || {};
  var f = options.global && options.global.formDefaults ? cloneDeep(options.global.formDefaults) : {};

  if (options.global && options.global.supressPropertyTitles === true) {
    f.title = schema.title;
  } else {
    f.title = schema.title || name;
  }

  if (schema.description) {
    f.description = schema.description;
  }

  if (options.required === true || schema.required === true) {
    f.required = true;
  }

  if (schema.maxLength) {
    f.maxlength = schema.maxLength;
  }

  if (schema.minLength) {
    f.minlength = schema.minLength;
  }

  if (schema.readOnly || schema.readonly) {
    f.readonly = true;
  }

  if (schema.minimum) {
    f.minimum = schema.minimum + (schema.exclusiveMinimum ? 1 : 0);
  }

  if (schema.maximum) {
    f.maximum = schema.maximum - (schema.exclusiveMaximum ? 1 : 0);
  }

  if (schema.validationMessage) {
    f.validationMessage = schema.validationMessage;
  }

  if (schema.enumNames) {
    f.titleMap = canonicalTitleMap(schema.enumNames, schema["enum"]);
  }

  f.schema = schema;
  return f;
};

var tBoolean = function tBoolean(name, schema, options) {
  if (stripNullType(schema.type) === 'tBoolean' && !schema["enum"]) {
    var f = stdFormObj(name, schema, options);
    f.key = options.path;
    f.type = 'tBoolean';
    options.lookup[ObjectPath.stringify(options.path)] = f;
    return f;
  }

  return undefined;
};

var text = function text(name, schema, options) {
  if (stripNullType(schema.type) === 'string' && !schema["enum"]) {
    var f = stdFormObj(name, schema, options);
    f.key = options.path;
    f.type = 'text';
    options.lookup[ObjectPath.stringify(options.path)] = f;
    return f;
  }

  return undefined;
};

var number = function number(name, schema, options) {
  if (stripNullType(schema.type) === 'number') {
    var f = stdFormObj(name, schema, options);
    f.key = options.path;
    f.type = 'number';
    options.lookup[ObjectPath.stringify(options.path)] = f;
    return f;
  }

  return undefined;
};

var integer = function integer(name, schema, options) {
  if (stripNullType(schema.type) === 'integer') {
    var f = stdFormObj(name, schema, options);
    f.key = options.path;
    f.type = 'number';
    options.lookup[ObjectPath.stringify(options.path)] = f;
    return f;
  }

  return undefined;
};

var date = function date(name, schema, options) {
  if (stripNullType(schema.type) === 'date') {
    var f = stdFormObj(name, schema, options);
    f.key = options.path;
    f.type = 'date';
    options.lookup[ObjectPath.stringify(options.path)] = f;
    return f;
  }

  return undefined;
};

var checkbox = function checkbox(name, schema, options) {
  if (stripNullType(schema.type) === 'boolean') {
    var f = stdFormObj(name, schema, options);
    f.key = options.path;
    f.type = 'checkbox';
    options.lookup[ObjectPath.stringify(options.path)] = f;
    return f;
  }

  return undefined;
};

var select = function select(name, schema, options) {
  if (stripNullType(schema.type) === 'string' && schema["enum"]) {
    var f = stdFormObj(name, schema, options);
    f.key = options.path;
    f.type = 'select';

    if (!f.titleMap && !schema.isObject) {
      f.titleMap = enumToTitleMap(schema["enum"]);
    }

    options.lookup[ObjectPath.stringify(options.path)] = f;
    return f;
  }

  return undefined;
};

var removeEmpty = function removeEmpty(obj) {
  return Object.entries(obj).forEach(function (_ref) {
    var key = _ref[0],
        val = _ref[1];
    if (val && typeof val === 'object') removeEmpty(val);else if (val === undefined || val === null || val === '') delete obj[key];
  });
};

var checkboxes = function checkboxes(name, schema, options) {
  if (stripNullType(schema.type) === 'array' && schema.items && schema.items["enum"]) {
    var f = stdFormObj(name, schema, options);
    f.key = options.path;
    f.type = 'checkboxes';

    if (!f.titleMap) {
      f.titleMap = enumToTitleMap(schema.items["enum"]);
    }

    options.lookup[ObjectPath.stringify(options.path)] = f;
    return f;
  }

  return undefined;
};

var defaultFormDefinition = function defaultFormDefinition(name, schema, options) {
  var rules = defaults[stripNullType(schema.type)];

  if (rules) {
    var def;

    for (var i = 0; i < rules.length; i += 1) {
      def = rules[i](name, schema, options);

      if (def) {
        if (def.schema['x-schema-form'] && isObject(def.schema['x-schema-form'])) {
          def = extend(def, def.schema['x-schema-form']);
        }

        return def;
      }
    }
  }

  return undefined;
};

var fieldset = function fieldset(name, schema, options) {
  if (stripNullType(schema.type) === 'object') {
    var f = stdFormObj(name, schema, options);
    f.type = 'fieldset';
    f.items = [];
    options.lookup[ObjectPath.stringify(options.path)] = f;

    if (schema.properties) {
      Object.keys(schema.properties).forEach(function (key) {
        if (Object.prototype.hasOwnProperty.call(schema.properties, key)) {
          var path = options.path.slice();
          path.push(key);

          if (options.ignore[ObjectPath.stringify(path)] !== true) {
            var required = schema.required && schema.required.indexOf(key) !== -1;
            var def = defaultFormDefinition(key, schema.properties[key], {
              path: path,
              required: required || false,
              lookup: options.lookup,
              ignore: options.ignore,
              global: options.global
            });

            if (def) {
              f.items.push(def);
            }
          }
        }
      });
    }

    return f;
  }

  return undefined;
};

var tuple = function tuple(name, schema, options) {
  if (stripNullType(schema.type) === 'array') {
    var f = stdFormObj(name, schema, options);
    f.type = 'tuple';
    f.key = options.path;
    options.lookup[ObjectPath.stringify(options.path)] = f;

    if (Array.isArray(schema.items)) {
      var required = schema.required && schema.required.indexOf(options.path[options.path.length - 1]);
      f.items = schema.items.reduce(function (items, item, index) {
        var arrPath = options.path.slice();
        arrPath.push(index);
        var def = defaultFormDefinition(name, item, {
          path: arrPath,
          required: required || false,
          lookup: options.lookup,
          ignore: options.ignore,
          global: options.global
        });

        if (def) {
          items.push(def);
        }

        return items;
      }, []);
      return f;
    }
  }

  return undefined;
};

var array = function array(name, schema, options) {
  if (stripNullType(schema.type) === 'array') {
    var f = stdFormObj(name, schema, options);
    f.type = 'array';
    f.key = options.path;
    options.lookup[ObjectPath.stringify(options.path)] = f;

    if (typeof schema.items !== 'undefined') {
      var required = schema.required && schema.required.indexOf(options.path[options.path.length - 1]) !== -1;
      var arrPath = options.path.slice();
      arrPath.push('');
      var def = defaultFormDefinition(name, schema.items, {
        path: arrPath,
        required: required || false,
        lookup: options.lookup,
        ignore: options.ignore,
        global: options.global
      });

      if (def) {
        f.items = [def];
      } else {
        f.items = schema.items;
      }
    }

    return f;
  }

  return undefined;
};

var defaults = {
  string: [select, text],
  object: [fieldset],
  number: [number],
  integer: [integer],
  "boolean": [checkbox],
  array: [checkboxes, tuple, array],
  date: [date],
  tBoolean: [tBoolean]
};

var getDefaults = function getDefaults(schema, ignore, globalOptions) {
  var form = [];
  var lookup = {};
  ignore = ignore || {};
  globalOptions = globalOptions || {};

  if (stripNullType(schema.type) === 'object') {
    if (schema.properties) {
      Object.keys(schema.properties).forEach(function (key) {
        if (Object.prototype.hasOwnProperty.call(schema.properties, key)) {
          if (ignore[key] !== true) {
            var required = schema.required && schema.required.indexOf(key) !== -1;
            var def = defaultFormDefinition(key, schema.properties[key], {
              path: [key],
              lookup: lookup,
              ignore: ignore,
              required: required,
              global: globalOptions
            });

            if (def) {
              form.push(def);
            }
          }
        }
      });
    }
  } else {
    throw new Error('Not implemented. Only type "object" allowed at root level of schema.');
  }

  return {
    form: form,
    lookup: lookup
  };
};

var postProcessFn = function postProcessFn(form) {
  return form;
};

var appendRule = function appendRule(type, rule) {
  if (!defaults[type]) {
    defaults[type] = [];
  }

  defaults[type].push(rule);
};

var prependRule = function prependRule(type, rule) {
  if (!defaults[type]) {
    defaults[type] = [];
  }

  defaults[type].unshift(rule);
};

var traverseSchema = function traverseSchema(schema, fn, path, ignoreArrays) {
  ignoreArrays = typeof ignoreArrays !== 'undefined' ? ignoreArrays : true;
  path = path || [];

  var traverse = function traverse(innerSchema, innerFunc, innerPath) {
    innerFunc(innerSchema, innerPath);

    if (innerSchema.properties) {
      Object.keys(innerSchema.properties).forEach(function (key) {
        if (Object.prototype.hasOwnProperty.call(innerSchema.properties, key)) {
          var currentPath = innerPath.slice();
          currentPath.push(key);
          traverse(innerSchema.properties[key], innerFunc, currentPath);
        }
      });
    }

    if (!ignoreArrays && innerSchema.items) {
      var arrPath = innerPath.slice();
      arrPath.push('');
      traverse(innerSchema.items, innerFunc, arrPath);
    }
  };

  traverse(schema, fn, path || []);
};

var traverseForm = function traverseForm(form, fn) {
  fn(form);

  if (form.items) {
    form.items.forEach(function (f) {
      traverseForm(f, fn);
    });
  }

  if (form.tabs) {
    form.tabs.forEach(function (tab) {
      tab.items.forEach(function (f) {
        traverseForm(f, fn);
      });
    });
  }
};

var merge = function merge(schema, form, ignore, options, readonly) {
  form = form || ['*'];
  options = options || {};
  readonly = readonly || schema.readonly || schema.readOnly;
  var stdForm = getDefaults(schema, ignore, options);
  var idx = form.indexOf('*');

  if (idx !== -1) {
    form = form.slice(0, idx).concat(stdForm.form).concat(form.slice(idx + 1));
  }

  var lookup = stdForm.lookup;
  return postProcessFn(form.map(function (obj) {
    if (typeof obj === 'string') {
      obj = {
        key: obj
      };
    }

    if (obj && obj.key) {
      if (typeof obj.key === 'string') {
        obj.key = ObjectPath.parse(obj.key);
      }
    }

    if (obj && obj.itemForm) {
      obj.items = [];
      var str = ObjectPath.stringify(obj.key);
      var foundForm = lookup[str];
      foundForm.items.forEach(function (item) {
        var o = cloneDeep(obj.itemForm);
        o.key = item.key;
        obj.items.push(o);
      });
    }

    if (obj && obj.key) {
      var strid = ObjectPath.stringify(obj.key);

      if (lookup[strid]) {
        var schemaDefaults = lookup[strid];
        Object.keys(schemaDefaults).forEach(function (key) {
          if (Object.prototype.hasOwnProperty.call(schemaDefaults, key)) {
            if (obj[key] === undefined) {
              obj[key] = schemaDefaults[key];
            }
          }
        });
      }
    }

    if (readonly === true) {
      obj.readonly = true;
    }

    if (obj && obj.items && obj.items.length > 0) {
      obj.items = merge(schema, obj.items, ignore, options, obj.readonly);
    }

    if (obj && obj.tabs) {
      obj.tabs.forEach(function (tab) {
        tab.items = merge(schema, tab.items, ignore, options, obj.readonly);
      });
    }

    if (obj && obj.type === 'checkbox' && isUndefined(obj.schema["default"])) {
      obj.schema["default"] = false;
    }

    return obj;
  }));
};

function selectOrSet(projection, obj, valueToSet, type) {
  var numRe = /^\d+$/;

  if (!obj) {
    obj = this;
  }

  var parts = typeof projection === 'string' ? ObjectPath.parse(projection) : projection;

  if (typeof valueToSet !== 'undefined' && parts.length === 1) {
    obj[parts[0]] = valueToSet;
    return obj;
  }

  if (typeof valueToSet !== 'undefined' && typeof obj[parts[0]] === 'undefined') {
    obj[parts[0]] = parts.length >= 2 && numRe.test(parts[1]) ? [] : {};
  }

  if (typeof type !== 'undefined' && ['number', 'integer'].indexOf(type) > -1 && typeof valueToSet === 'undefined') {
    obj[parts[0]] = valueToSet;
    return obj;
  }

  var value = obj[parts[0]];

  for (var i = 1; i < parts.length; i += 1) {
    if (parts[i] === '') {
      return undefined;
    }

    if (typeof valueToSet !== 'undefined') {
      if (i === parts.length - 1) {
        value[parts[i]] = valueToSet;
        return valueToSet;
      }

      var tmp = value[parts[i]];

      if (typeof tmp === 'undefined' || tmp === null) {
        tmp = numRe.test(parts[i + 1]) ? [] : {};
        value[parts[i]] = tmp;
      }

      value = tmp;
    } else if (value) {
      value = value[parts[i]];
    }
  }

  return value;
}

var validateBySchema = function validateBySchema(schema, value) {
  return tv4.validateResult(value, schema);
};

var validate = function validate(form, value, getLocalizedString) {
  if (!form) {
    return {
      valid: true
    };
  }

  var schema = form.schema;

  if (!schema) {
    return {
      valid: true
    };
  }

  if (value === '') {
    value = undefined;
  }

  if (form.type === 'number' && value === null) {
    value = undefined;
  }

  if (form.type === 'number' && Number.isNaN(parseFloat(value))) {
    value = undefined;
  }

  var wrap = {
    type: 'object',
    properties: {}
  };
  var propName = form.key[form.key.length - 1];
  wrap.properties[propName] = schema;

  if (form.required) {
    wrap.required = [propName];
  }

  var valueWrap = {};

  if (typeof value !== 'undefined') {
    valueWrap[propName] = value;
  }

  var tv4Result = tv4.validateResult(valueWrap, wrap);

  if (tv4Result != null && !tv4Result.valid && form.validationMessage != null && typeof value !== 'undefined') {
    tv4Result.error.message = getLocalizedString ? getLocalizedString(form.validationMessage) : form.validationMessage;
  }

  return tv4Result;
};

var getValueFromModel = function getValueFromModel(model, key) {
  var result;

  if (Array.isArray(key)) {
    key.reduce(function (cur, nxt) {
      return cur && cur[nxt];
    }, model);
    result = key.reduce(function (cur, nxt) {
      return cur && cur[nxt];
    }, model);
  } else {
    result = model[key];
  }

  return result;
};

var getTitleByValue = function getTitleByValue(titleMap, value) {
  for (var i = 0; i < titleMap.length; i += 1) {
    var item = titleMap[i];
    if (item.value === value) return item.name;
  }

  return undefined;
};

var utils = {
  traverseForm: traverseForm,
  traverseSchema: traverseSchema,
  prependRule: prependRule,
  appendRule: appendRule,
  postProcessFn: postProcessFn,
  getDefaults: getDefaults,
  defaultFormDefinition: defaultFormDefinition,
  defaults: defaults,
  array: array,
  fieldset: fieldset,
  checkboxes: checkboxes,
  select: select,
  checkbox: checkbox,
  integer: integer,
  number: number,
  text: text,
  stdFormObj: stdFormObj,
  canonicalTitleMap: canonicalTitleMap,
  enumToTitleMap: enumToTitleMap,
  stripNullType: stripNullType,
  merge: merge,
  validate: validate,
  validateBySchema: validateBySchema,
  safeEval: safeEval,
  selectOrSet: selectOrSet,
  getValueFromModel: getValueFromModel,
  getTitleByValue: getTitleByValue,
  removeEmpty: removeEmpty
};

var defaultValue = function defaultValue(props) {
  var value;
  if (props.form && props.form.key) value = utils.selectOrSet(props.form.key, props.model);

  if (value === null || value === undefined) {
    if (props.form["default"]) {
      value = props.form["default"];
    } else if (props.form.schema && props.form.schema["default"]) {
      value = props.form.schema["default"];
    }
  }

  return value;
};

var getDisplayName = function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
};

var ComposedComponent = (function (ComposedComponent, defaultProps) {
  if (defaultProps === void 0) {
    defaultProps = {};
  }

  return /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(Composed, _React$Component);

    function Composed(props) {
      var _this;

      _this = _React$Component.call(this, props) || this;
      _this.displayName = "ComposedComponent(" + getDisplayName(ComposedComponent) + ")";
      _this.onChangeValidate = _this.onChangeValidate.bind(_assertThisInitialized(_this));
      _this.state = _this.constructor.getDerivedStateFromProps(_this.props);
      return _this;
    }

    Composed.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {
      var errorText = nextProps.errorText,
          form = nextProps.form,
          showErrors = nextProps.showErrors,
          localization = nextProps.localization;
      var getLocalizedString = localization && localization.getLocalizedString;
      var value = defaultValue(nextProps);

      if (!showErrors) {
        return {
          value: value,
          valid: true,
          error: ''
        };
      }

      var validationResult = utils.validate(form, value || undefined, getLocalizedString);
      var error = !validationResult.valid ? validationResult.error : undefined;
      return {
        value: value,
        valid: validationResult.valid,
        error: (!validationResult.valid ? error.message : null) || errorText
      };
    };

    var _proto = Composed.prototype;

    _proto.onChangeValidate = function onChangeValidate(e, v) {
      var _this$props = this.props,
          form = _this$props.form,
          onChange = _this$props.onChange,
          localization = _this$props.localization;
      var getLocalizedString = localization && localization.getLocalizedString;
      var value = null;
      var type = form.schema ? form.schema.type : form.type;

      switch (type) {
        case 'integer':
        case 'number':
          {
            value = e;
            break;
          }

        case 'boolean':
          value = e.target.checked;
          break;

        case 'array':
          value = e;
          break;

        case 'object':
          if (form.type === 'date') {
            if (e.target.value.length > 0) {
              value = new Date(e.target.value);
            } else {
              value = '';
            }

            break;
          }
          value = e.target.value;
          break;

        default:
          value = e.target.value;
      }

      var validationResult = utils.validate(form, value, getLocalizedString);
      this.setState({
        value: value,
        valid: validationResult.valid,
        error: validationResult.valid ? null : validationResult.error.message
      });
      onChange(form.key, value);
    };

    _proto.render = function render() {
      return /*#__PURE__*/React__default.createElement(ComposedComponent, _extends({}, defaultProps, this.props, this.state, {
        onChangeValidate: this.onChangeValidate
      }));
    };

    return Composed;
  }(React__default.Component);
});

var Text = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Text, _React$Component);

  function Text(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    var _this$props = _this.props,
        model = _this$props.model,
        form = _this$props.form,
        value = _this$props.value,
        setDefault = _this$props.setDefault;
    var key = form.key;
    setDefault(key, model, form, value);
    return _this;
  }

  var _proto = Text.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        form = _this$props2.form,
        error = _this$props2.error,
        value = _this$props2.value,
        onChangeValidate = _this$props2.onChangeValidate,
        getLocalizedString = _this$props2.localization.getLocalizedString,
        otherProps = _this$props2.otherProps;
    return /*#__PURE__*/React__default.createElement(TextField, _extends({
      type: form.type,
      label: form.title && getLocalizedString(form.title),
      placeholder: form.placeholder && getLocalizedString(form.placeholder),
      helperText: (error || form.description) && getLocalizedString(error || form.description),
      error: !!error,
      onChange: onChangeValidate,
      value: value || '',
      disabled: form.readonly,
      fullWidth: true,
      required: form.required,
      style: form.style
    }, otherProps, form.otherProps));
  };

  return Text;
}(React__default.Component);

Text.defaultProps = {
  otherProps: undefined
};
var Text$1 = ComposedComponent(Text);

var NumberComponent = function NumberComponent(props) {
  var form = props.form,
      value = props.value,
      getLocalizedNumber = props.localization.getLocalizedNumber,
      onChangeValidate = props.onChangeValidate;
  var inputValue = value || value === 0 ? value : '';
  if (form.useLocalizer) inputValue = getLocalizedNumber(inputValue);

  var onChange = function onChange(e) {
    var type = form.schema ? form.schema.type : form.type;
    var enteredValue = null;

    if (type === 'integer') {
      enteredValue = parseInt(e.target.value, 10);
    } else if (type === 'number') {
      var values = e.target.value.split('.');

      if (values.length < 2) {
        enteredValue = parseInt(e.target.value, 10);
      } else if (values.length > 1) {
        if (values[1].length > 0) enteredValue = parseFloat(e.target.value);else enteredValue = parseInt(values[0], 10) + ".";
      }
    }

    onChangeValidate(enteredValue);
  };

  return /*#__PURE__*/React__default.createElement(Text$1, _extends({}, props, {
    form: _extends({}, form, {
      type: 'string'
    }),
    value: inputValue,
    otherProps: {
      onChange: onChange
    }
  }));
};

var Number$1 = ComposedComponent(NumberComponent);

var TextArea = function TextArea(props) {
  var form = props.form;
  return /*#__PURE__*/React__default.createElement(Text$1, _extends({}, props, {
    otherProps: {
      multiline: true,
      rows: form.rows,
      rowsMax: form.rowsMax
    }
  }));
};

var TextArea$1 = ComposedComponent(TextArea);

var converter = new Showdown.Converter({
  tables: true,
  simplifiedAutoLink: true,
  strikethrough: true,
  tasklists: true
});

var Markdown = function Markdown(props) {
  var model = props.model,
      form = props.form,
      value = props.value,
      error = props.error,
      setDefault = props.setDefault,
      onChangeValidate = props.onChangeValidate;
  var key = form.key,
      title = form.title;
  setDefault(key, model, form, value);

  var _useState = React.useState('write'),
      selectedTab = _useState[0],
      setSelectedTab = _useState[1];

  var _useState2 = React.useState(value),
      text = _useState2[0],
      setText = _useState2[1];

  React.useEffect(function () {
    onChangeValidate({
      target: {
        value: text
      }
    });
  }, [text]);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(FormLabel, {
    required: form.required
  }, title), /*#__PURE__*/React__default.createElement(ReactMde, {
    value: value,
    onChange: setText,
    readOnly: form.readonly,
    selectedTab: selectedTab,
    onTabChange: setSelectedTab,
    generateMarkdownPreview: function generateMarkdownPreview(markdown) {
      return Promise.resolve(converter.makeHtml(markdown));
    }
  }), error ? /*#__PURE__*/React__default.createElement(FormHelperText, {
    error: true
  }, error) : null);
};

var Markdown$1 = ComposedComponent(Markdown);

var dataSourceConfig = {
  text: "name",
  value: "value"
};

var TextSuggest = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(TextSuggest, _React$Component);

  function TextSuggest() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.handleUpdate = function (newValue, index) {
      var key = _this.props.form.key;
      var type = _this.props.form.schema.type;
      return _this.props.onChange(key, newValue[dataSourceConfig.value], type, _this.props.form);
    };

    _this.handleInit = function (init_value) {
      if (!_this.props.form.schema || !_this.props.form.schema["enum"]) return init_value.toString();
      var names = _this.props.form.schema.enumNames || _this.props.form.schema["enum"];
      var values = _this.props.form.schema["enum"];
      var init_value_name = names[values.indexOf(init_value)];
      return init_value_name || init_value.toString();
    };

    return _this;
  }

  var _proto = TextSuggest.prototype;

  _proto.render = function render() {
    var filter = function (filter) {
      switch (filter) {
        case "fuzzy":
          return AutoComplete.fuzzyFilter;

        default:
          return AutoComplete.caseInsensitiveFilter;
      }
    }(this.props.form.filter);

    var value = this.props.value && this.handleInit(this.props.value);
    return /*#__PURE__*/React__default.createElement("div", {
      className: this.props.form.htmlClass
    }, /*#__PURE__*/React__default.createElement(AutoComplete, {
      type: this.props.form.type,
      floatingLabelText: this.props.form.title,
      hintText: this.props.form.placeholder,
      errorText: this.props.error,
      onNewRequest: this.handleUpdate,
      disabled: this.props.form.readonly,
      style: this.props.form.style || {
        width: "100%"
      },
      openOnFocus: true,
      searchText: value,
      dataSource: this.props.form.titleMap || ["Loading..."],
      filter: filter,
      maxSearchResults: this.props.form.maxSearchResults || 5,
      dataSourceConfig: dataSourceConfig
    }));
  };

  return TextSuggest;
}(React__default.Component);

var TextSuggest$1 = ComposedComponent(TextSuggest);

function Select(props) {
  var model = props.model,
      form = props.form,
      error = props.error,
      setDefault = props.setDefault,
      onChange = props.onChange,
      onChangeValidate = props.onChangeValidate,
      getLocalizedString = props.localization.getLocalizedString,
      _props$form = props.form,
      key = _props$form.key,
      _props$form$schema = _props$form.schema,
      isObject = _props$form$schema.isObject,
      values = _props$form$schema["enum"],
      findFn = _props$form$schema.findFn,
      displayFn = _props$form$schema.displayFn,
      noLocalization = _props$form$schema.noLocalization;
  var defaultValue = form && form.selectProps && form.selectProps.multiple ? [] : '';

  if (props.form["default"]) {
    defaultValue = props.form["default"];
  } else if (props.form.schema && props.form.schema["default"]) {
    defaultValue = props.form.schema["default"];
  }

  var _useState = React.useState(utils.getValueFromModel(model, form.key) || defaultValue),
      currentValue = _useState[0],
      setCurrentValue = _useState[1];

  React.useEffect(function () {
    setDefault(key, model, form, currentValue);
  }, []);

  var onSelected = function onSelected(event) {
    var selectedValue = event.target.value;
    setCurrentValue(selectedValue);

    if (isObject) {
      var item = values.find(function (each) {
        return findFn ? findFn(each, selectedValue) : each === selectedValue;
      });
      onChange(key, item);
    } else {
      onChangeValidate(event);
    }
  };

  var getLabel = function getLabel(each) {
    if (displayFn) {
      return displayFn(each);
    }

    if (noLocalization) return each.name;
    return getLocalizedString(each.name);
  };

  var menuItems = [];

  if (isObject) {
    menuItems = form.schema["enum"].map(function (item, idx) {
      return (
        /*#__PURE__*/
        React__default.createElement(MenuItem, {
          key: idx,
          value: item
        }, getLabel(item))
      );
    });
  } else {
    menuItems = form.titleMap.map(function (item, idx) {
      return (
        /*#__PURE__*/
        React__default.createElement(MenuItem, {
          key: idx,
          value: item.value
        }, getLabel(item))
      );
    });
  }

  return /*#__PURE__*/React__default.createElement(FormControl, _extends({
    fullWidth: true,
    error: !!error
  }, form.otherProps), /*#__PURE__*/React__default.createElement(InputLabel, _extends({
    required: form.required
  }, form.labelProps), form.title && getLocalizedString(form.title)), /*#__PURE__*/React__default.createElement(MuiSelect, _extends({
    value: currentValue,
    placeholder: form.placeholder && getLocalizedString(form.placeholder),
    disabled: form.readonly,
    onChange: onSelected
  }, form.selectProps), menuItems), /*#__PURE__*/React__default.createElement(FormHelperText, form.helperTextProps, (error || form.description) && getLocalizedString(error || form.description)));
}

var Select$1 = ComposedComponent(Select);

var styles = function styles(theme) {
  return {
    root: {
      display: 'flex',
      flexWrap: 'wrap'
    },
    chips: {
      display: 'flex',
      flexWrap: 'wrap'
    },
    chip: {
      margin: theme.spacing(0.25)
    },
    menuItem: {
      fontWeight: theme.typography.fontWeightRegular
    },
    selectedMenuItem: {
      fontWeight: theme.typography.fontWeightMedium
    }
  };
};

var ITEM_HEIGHT = 48;
var ITEM_PADDING_TOP = 8;
var MenuProps = {
  PaperProps: {
    style: {
      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
      width: 250
    }
  }
};

var MultiSelect = /*#__PURE__*/function (_Component) {
  _inheritsLoose(MultiSelect, _Component);

  function MultiSelect(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _this.onSelected = function (event) {
      var onChangeValidate = _this.props.onChangeValidate;
      var currentValue = event.target.value;

      _this.setState({
        currentValue: currentValue
      });

      onChangeValidate(currentValue);
    };

    var _this$props = _this.props,
        model = _this$props.model,
        form = _this$props.form;
    _this.state = {
      currentValue: utils.getValueFromModel(model, form.key) || []
    };
    return _this;
  }

  MultiSelect.getDerivedStateFromProps = function getDerivedStateFromProps(props) {
    var model = props.model,
        form = props.form;

    if (model && form.key) {
      return {
        currentValue: utils.getValueFromModel(model, form.key) || []
      };
    }

    return null;
  };

  var _proto = MultiSelect.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        form = _this$props2.form,
        classes = _this$props2.classes,
        getLocalizedString = _this$props2.localization.getLocalizedString;
    var currentValue = this.state.currentValue;
    var getTitle = utils.getTitleByValue.bind(this, form.titleMap);
    var menuItems = form.titleMap.map(function (item) {
      return /*#__PURE__*/React__default.createElement(MenuItem, {
        key: item.value,
        value: item.value,
        className: currentValue.indexOf(item.value) === -1 ? classes.menuItem : classes.selectedMenuItem
      }, item.name && getLocalizedString(item.name));
    });
    return /*#__PURE__*/React__default.createElement(FormControl, _extends({
      fullWidth: true
    }, form.otherProps), /*#__PURE__*/React__default.createElement(InputLabel, {
      required: form.required
    }, form.title && getLocalizedString(form.title)), /*#__PURE__*/React__default.createElement(MuiSelect, {
      multiple: true,
      value: currentValue || '',
      placeholder: form.placeholder && getLocalizedString(form.placeholder),
      disabled: form.readonly,
      onChange: this.onSelected,
      MenuProps: MenuProps,
      renderValue: function renderValue(selected) {
        return /*#__PURE__*/React__default.createElement("div", {
          className: classes.chips
        }, selected.map(function (value) {
          return /*#__PURE__*/React__default.createElement(Chip, {
            key: value,
            label: getTitle(value) && getLocalizedString(getTitle(value)),
            className: classes.chip
          });
        }));
      }
    }, menuItems));
  };

  return MultiSelect;
}(React.Component);

var MultiSelect$1 = ComposedComponent(styles$4.withStyles(styles)(MultiSelect));

var styles$1 = function styles(theme) {
  return {
    formControl: {
      marginTop: theme.spacing(1)
    },
    group: {
      margin: theme.spacing(1, 0)
    }
  };
};

var Radios = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Radios, _Component);

  function Radios() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _this.renderItems = function (form) {
      var getLocalizedString = _this.props.localization.getLocalizedString;
      return form.titleMap.map(function (item, index) {
        return /*#__PURE__*/React__default.createElement(FormControlLabel, {
          key: index,
          control: /*#__PURE__*/React__default.createElement(Radio, null),
          label: item.name && getLocalizedString(item.name),
          value: item.value,
          disabled: form.readonly
        });
      });
    };

    return _this;
  }

  var _proto = Radios.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        classes = _this$props.classes,
        form = _this$props.form,
        value = _this$props.value,
        onChangeValidate = _this$props.onChangeValidate,
        getLocalizedString = _this$props.localization.getLocalizedString;
    return /*#__PURE__*/React__default.createElement(FormControl, _extends({
      component: "fieldset",
      className: classes.formControl
    }, form.otherProps), /*#__PURE__*/React__default.createElement(FormLabel, {
      component: "legend",
      required: form.required
    }, form.title && getLocalizedString(form.title)), /*#__PURE__*/React__default.createElement(RadioGroup, {
      value: value,
      name: form.title,
      onChange: onChangeValidate,
      className: classes.group
    }, this.renderItems(form)));
  };

  return Radios;
}(React.Component);

var Radios$1 = ComposedComponent(styles$4.withStyles(styles$1)(Radios));

var NativeDateField = function NativeDateField(props) {
  var value = props.value,
      getLocalizedDate = props.localization.getLocalizedDate,
      form = props.form,
      type = props.type;
  return /*#__PURE__*/React__default.createElement(Text$1, _extends({}, props, {
    form: _extends({}, form, {
      type: type
    }),
    value: getLocalizedDate(value),
    otherProps: {
      InputLabelProps: {
        shrink: true
      }
    }
  }, form.otherProps));
};

var DateComponent = ComposedComponent(NativeDateField, {
  type: 'date'
});

var Timestamp = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Timestamp, _React$Component);

  function Timestamp(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    var _this$props = _this.props,
        model = _this$props.model,
        form = _this$props.form,
        value = _this$props.value,
        setDefault = _this$props.setDefault;
    var key = form.key;
    var d = new Date();
    var currentTimestamp = d.toISOString().substring(0, 16);
    setDefault(key, model, form, value || currentTimestamp);
    return _this;
  }

  var _proto = Timestamp.prototype;

  _proto.render = function render() {
    var _this$props2 = this.props,
        form = _this$props2.form,
        error = _this$props2.error,
        value = _this$props2.value,
        onChangeValidate = _this$props2.onChangeValidate,
        getLocalizedString = _this$props2.localization.getLocalizedString;
    return /*#__PURE__*/React__default.createElement(TextField, _extends({
      type: "datetime-local",
      label: form.title && getLocalizedString(form.title),
      placeholder: form.placeholder && getLocalizedString(form.placeholder),
      helperText: (error || form.description) && getLocalizedString(error || form.description),
      error: !!error,
      onChange: onChangeValidate,
      value: value || '',
      disabled: form.readonly,
      fullWidth: true,
      required: form.required,
      style: form.style
    }, form.otherProps));
  };

  return Timestamp;
}(React__default.Component);

var Timestamp$1 = ComposedComponent(Timestamp);

function FormCheckbox(props) {
  var model = props.model,
      form = props.form,
      value = props.value,
      setDefault = props.setDefault,
      getLocalizedString = props.localization.getLocalizedString,
      onChangeValidate = props.onChangeValidate;
  var key = form.key;
  setDefault(key, model, form, value);
  return /*#__PURE__*/React__default.createElement(FormGroup, {
    row: true
  }, /*#__PURE__*/React__default.createElement(FormControlLabel, _extends({
    className: form.className,
    label: form.title && getLocalizedString(form.title),
    control: /*#__PURE__*/React__default.createElement(Checkbox$1, {
      name: form.key.slice(-1)[0],
      value: form.key.slice(-1)[0],
      checked: value || false,
      disabled: form.readonly,
      onChange: onChangeValidate
    })
  }, form.otherProps)));
}

var Checkbox = ComposedComponent(FormCheckbox);

var Help = function Help(_ref) {
  var _ref$form = _ref.form,
      description = _ref$form.description,
      variant = _ref$form.variant,
      align = _ref$form.align,
      color = _ref$form.color,
      noWrap = _ref$form.noWrap,
      paragraph = _ref$form.paragraph,
      otherProps = _ref$form.otherProps;
  return /*#__PURE__*/React__default.createElement(Typography, _extends({
    variant: variant,
    align: align,
    color: color,
    noWrap: noWrap,
    paragraph: paragraph
  }, otherProps), description);
};

var styles$2 = function styles(theme) {
  return {
    arrayItem: {
      position: 'relative',
      padding: theme.spacing(),
      marginTop: theme.spacing(),
      display: 'flex'
    },
    deleteItemButton: {
      margin: [[theme.spacing(-1), theme.spacing(-1), 'auto', 'auto']]
    },
    addButton: {
      marginLeft: theme.spacing()
    },
    elementsContainer: {
      display: 'flex',
      flexWrap: 'wrap'
    },
    title: {
      margin: 'auto 0'
    }
  };
};

var ArrayComponent = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ArrayComponent, _Component);

  ArrayComponent.assignItemId = function assignItemId(item) {
    var newItem = null;

    if (item && typeof item === 'object' && Array.isArray(item)) {
      newItem = [].concat(item);
    } else if (item && typeof item === 'object' && !item[ArrayComponent.ITEM_ID]) {
      newItem = _extends({}, item);
    }

    if (newItem) {
      Object.defineProperty(newItem, ArrayComponent.ITEM_ID, {
        enumerable: false,
        writable: true
      });
      ArrayComponent.SEQUENCE += 1;
      newItem[ArrayComponent.ITEM_ID] = ArrayComponent.SEQUENCE;
      return newItem;
    }

    return item;
  };

  function ArrayComponent(_props) {
    var _this;

    _this = _Component.call(this, _props) || this;
    _this.SEQUENCE = 1;

    _this.onAppend = function () {
      var _this$props = _this.props,
          form = _this$props.form,
          options = _this$props.options,
          onChangeValidate = _this$props.onChangeValidate;
      var model = _this.state.model;
      var empty;

      if (form && form.schema && form.schema.items) {
        var items = form.schema.items;

        if (items.type && items.type.indexOf('object') !== -1) {
          empty = {};

          if (!options || options.setSchemaDefaults !== false) {
            empty = typeof items["default"] !== 'undefined' ? items["default"] : empty;

            if (empty) {
              utils.traverseSchema(items, function (prop, path) {
                if (typeof prop["default"] !== 'undefined') {
                  utils.selectOrSet(path, empty, prop["default"]);
                }
              });
            }
          }
        } else if (items.type && items.type.indexOf('array') !== -1) {
          empty = [];

          if (!options || options.setSchemaDefaults !== false) {
            empty = items["default"] || empty;
          }
        } else if (!options || options.setSchemaDefaults !== false) {
          empty = items["default"] || empty;
        }
      }

      var newModel = model;
      ArrayComponent.assignItemId(empty);
      newModel.push(empty);

      _this.setState({
        model: newModel
      });

      onChangeValidate(model);
    };

    _this.onDelete = function (index) {
      return function () {
        var model = _this.state.model;
        var onChangeValidate = _this.props.onChangeValidate;
        var newModel = model;
        newModel.splice(index, 1);

        _this.setState({
          model: newModel
        });

        onChangeValidate(model);
      };
    };

    _this.getAddButton = function () {
      var _this$props2 = _this.props,
          form = _this$props2.form,
          classes = _this$props2.classes;

      var AddButton = form.AddButton || function (props) {
        return /*#__PURE__*/React__default.createElement(Button, _extends({
          className: classes.addButton,
          variant: "contained",
          color: "primary"
        }, props));
      };

      return /*#__PURE__*/React__default.createElement(AddButton, {
        onClick: _this.onAppend
      }, form.add || 'Add');
    };

    var _this$props3 = _this.props,
        _form = _this$props3.form,
        _model = _this$props3.model;
    _this.state = {
      model: utils.selectOrSet(_form.key, _model) || []
    };
    return _this;
  }

  ArrayComponent.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    var form = props.form;
    var propsKey = form.key;

    if (props.form && propsKey === state.formKey && props.model && props.model[propsKey] === state.model) {
      return null;
    }

    var model = utils.selectOrSet(propsKey, props.model) || [];
    return {
      formKey: propsKey,
      model: model.map(ArrayComponent.assignItemId)
    };
  };

  var _proto = ArrayComponent.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var _this$props4 = this.props,
        form = _this$props4.form,
        model = _this$props4.model;

    if (form.startEmpty !== true && model.length === 0) {
      this.onAppend();
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props5 = this.props,
        classes = _this$props5.classes,
        form = _this$props5.form,
        builder = _this$props5.builder,
        model = _this$props5.model,
        mapper = _this$props5.mapper,
        onChange = _this$props5.onChange,
        getLocalizedString = _this$props5.localization.getLocalizedString;
    var stateModel = this.state.model;
    var arrays = [];

    var _loop = function _loop(i) {
      var item = stateModel[i];
      var forms = form.items.map(function (eachForm, index) {
        var copy = ArrayComponent.copyWithIndex(eachForm, i);
        return builder(copy, model, index, mapper, onChange, builder, {
          arrayIndex: i
        });
      });
      arrays.push( /*#__PURE__*/React__default.createElement(Card, {
        className: classes.arrayItem,
        key: item && item[ArrayComponent.ITEM_ID] || i
      }, /*#__PURE__*/React__default.createElement("div", {
        className: classes.elementsContainer
      }, forms), /*#__PURE__*/React__default.createElement(IconButton, {
        onClick: _this2.onDelete(i),
        className: classes.deleteItemButton
      }, /*#__PURE__*/React__default.createElement(DeleteIcon, {
        fontSize: "small"
      }))));
    };

    for (var i = 0; i < stateModel.length; i += 1) {
      _loop(i);
    }

    return /*#__PURE__*/React__default.createElement("div", {
      className: classes.root
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        display: 'flex'
      }
    }, /*#__PURE__*/React__default.createElement(FormLabel, {
      required: form.required,
      className: classes.title
    }, form.title && getLocalizedString(form.title)), this.getAddButton()), /*#__PURE__*/React__default.createElement("div", null, arrays));
  };

  return ArrayComponent;
}(React.Component);

ArrayComponent.setIndex = function (index) {
  return function (form) {
    if (form.key) {
      form.key[form.key.indexOf('')] = index;
    }
  };
};

ArrayComponent.copyWithIndex = function (form, index) {
  var copy = cloneDeep(form);
  copy.arrayIndex = index;
  utils.traverseForm(copy, ArrayComponent.setIndex(index));
  return copy;
};

ArrayComponent.ITEM_ID = Symbol('_SCHEMAFORM_ITEM_ID');
var Array$1 = ComposedComponent(styles$4.withStyles(styles$2)(ArrayComponent));

var styles$3 = function styles(theme) {
  return {
    root: {
      marginTop: theme.spacing(1)
    },
    fields: {
      marginLeft: theme.spacing(1)
    }
  };
};

var FieldSet = function FieldSet(_ref) {
  var form = _ref.form,
      mapper = _ref.mapper,
      builder = _ref.builder,
      model = _ref.model,
      onChange = _ref.onChange,
      classes = _ref.classes,
      getLocalizedString = _ref.localization.getLocalizedString;
  var forms = form.items.map(function (f, index) {
    return builder(f, model, index, mapper, onChange, builder);
  });
  var className = classNames(classes.root, form.htmlClass);
  return /*#__PURE__*/React__default.createElement(FormControl, _extends({
    component: "fieldset",
    className: className,
    style: form.style
  }, form.otherProps), /*#__PURE__*/React__default.createElement(FormLabel, {
    component: "legend",
    required: form.required
  }, form.title && getLocalizedString(form.title)), /*#__PURE__*/React__default.createElement("div", {
    className: classes.fields
  }, forms));
};

var FieldSet$1 = styles$4.withStyles(styles$3)(FieldSet);

var TripleBoolean = /*#__PURE__*/function (_Component) {
  _inheritsLoose(TripleBoolean, _Component);

  TripleBoolean.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {
    return {
      yesChecked: nextProps.value === 'yes',
      noChecked: nextProps.value === 'no'
    };
  };

  function TripleBoolean(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.divStyle = {
      padding: '20px'
    };
    _this.state = {
      yesChecked: false,
      noChecked: false
    };
    var _this$props = _this.props,
        model = _this$props.model,
        form = _this$props.form,
        value = _this$props.value,
        setDefault = _this$props.setDefault;
    var key = form.key;
    setDefault(key, model, form, value);
    return _this;
  }

  var _proto = TripleBoolean.prototype;

  _proto.displaySwitch = function displaySwitch() {
    var _this$props2 = this.props,
        _this$props2$form = _this$props2.form,
        title = _this$props2$form.title,
        yesLabel = _this$props2$form.yesLabel,
        noLabel = _this$props2$form.noLabel,
        clearButtonLabel = _this$props2$form.clearButtonLabel,
        required = _this$props2$form.required,
        onChangeValidate = _this$props2.onChangeValidate,
        value = _this$props2.value,
        getLocalizedString = _this$props2.localization.getLocalizedString;
    var _this$state = this.state,
        yesChecked = _this$state.yesChecked,
        noChecked = _this$state.noChecked;
    return /*#__PURE__*/React__default.createElement("div", {
      style: this.divStyle
    }, /*#__PURE__*/React__default.createElement(FormLabel, {
      required: required
    }, title && getLocalizedString(title)), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement(core.FormGroup, null, /*#__PURE__*/React__default.createElement(core.FormControlLabel, {
      control: /*#__PURE__*/React__default.createElement(core.Checkbox, {
        onClick: function onClick(e) {
          onChangeValidate(e, 'yes');
        },
        checked: yesChecked
      }),
      label: yesLabel ? getLocalizedString(yesLabel) : 'Yes'
    }), /*#__PURE__*/React__default.createElement(core.FormControlLabel, {
      control: /*#__PURE__*/React__default.createElement(core.Checkbox, {
        onClick: function onClick(e) {
          onChangeValidate(e, 'no');
        },
        checked: noChecked
      }),
      label: noLabel ? getLocalizedString(noLabel) : 'No'
    })), value === 'yes' || value === 'no' ? /*#__PURE__*/React__default.createElement(core.Button, {
      id: "temp",
      variant: "text",
      color: "primary",
      onClick: function onClick(e) {
        return onChangeValidate(e, 'unanswered');
      }
    }, clearButtonLabel ? getLocalizedString(clearButtonLabel) : 'clear response') : '');
  };

  _proto.render = function render() {
    return /*#__PURE__*/React__default.createElement(core.Card, null, this.displaySwitch());
  };

  return TripleBoolean;
}(React.Component);

var TripleBoolean$1 = ComposedComponent(TripleBoolean);

function Taxonomy(props) {
  var model = props.model,
      form = props.form,
      value = props.value,
      error = props.error,
      setDefault = props.setDefault,
      onChangeValidate = props.onChangeValidate;
  var key = form.key,
      title = form.title,
      action = form.action;
  setDefault(key, model, form, value);

  var _useState = React.useState(value || []),
      taxonomies = _useState[0],
      setTaxonomies = _useState[1];

  var _useState2 = React.useState([]),
      expanded = _useState2[0],
      setExpended = _useState2[1];

  var _useState3 = React.useState([]),
      terms = _useState3[0],
      setTerms = _useState3[1];

  React.useEffect(function () {
    onChangeValidate(taxonomies);
  }, [taxonomies]);

  var fetchCateogry = function fetchCateogry(url) {
    var cookies = new Cookies();
    var headers = {
      'Content-Type': 'application/json'
    };
    if (cookies.get('csrf')) Object.assign(headers, {
      'X-CSRF-TOKEN': cookies.get('csrf')
    });
    fetch(url, {
      headers: headers,
      credentials: 'include'
    }).then(function (res) {
      if (res.ok) {
        return res.json();
      }

      return res.text().then(function (text) {
        throw new Error(text);
      });
    }).then(function (res) {
      setTerms(res);
    })["catch"](function (error) {
      console.error(error);
    });
  };

  React.useEffect(function () {
    var url = action.url;
    fetchCateogry(url);
  }, []);
  var icons = {
    check: /*#__PURE__*/React__default.createElement(CheckBoxIcon, {
      className: "rct-icon rct-icon-check"
    }),
    uncheck: /*#__PURE__*/React__default.createElement(CheckBoxOutlineBlankIcon, {
      className: "rct-icon rct-icon-uncheck"
    }),
    halfCheck: /*#__PURE__*/React__default.createElement(IndeterminateCheckBoxIcon, {
      className: "rct-icon rct-icon-half-check"
    }),
    expandClose: /*#__PURE__*/React__default.createElement(ChevronRightIcon, {
      className: "rct-icon rct-icon-expand-close"
    }),
    expandOpen: /*#__PURE__*/React__default.createElement(KeyboardArrowDownIcon, {
      className: "rct-icon rct-icon-expand-open"
    }),
    expandAll: /*#__PURE__*/React__default.createElement(AddBoxIcon, {
      className: "rct-icon rct-icon-expand-all"
    }),
    collapseAll: /*#__PURE__*/React__default.createElement(IndeterminateCheckBoxIcon, {
      className: "rct-icon rct-icon-collapse-all"
    }),
    parentClose: /*#__PURE__*/React__default.createElement(FolderIcon, {
      className: "rct-icon rct-icon-parent-close"
    }),
    parentOpen: /*#__PURE__*/React__default.createElement(FolderOpenIcon, {
      className: "rct-icon rct-icon-parent-open"
    }),
    leaf: /*#__PURE__*/React__default.createElement(InsertDriveFileIcon, {
      className: "rct-icon rct-icon-leaf-close"
    })
  };
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(FormLabel, {
    required: form.required
  }, title), /*#__PURE__*/React__default.createElement(CheckboxTree, {
    nodes: terms,
    checked: taxonomies,
    expanded: expanded,
    onCheck: function onCheck(checked) {
      return setTaxonomies(checked);
    },
    onExpand: function onExpand(expanded) {
      return setExpended(expanded);
    },
    icons: icons,
    noCascade: true
  }), error ? /*#__PURE__*/React__default.createElement(FormHelperText, {
    error: true
  }, error) : null);
}

var Taxonomy$1 = ComposedComponent(Taxonomy);

var formatDate = function formatDate(date) {
  var value = date && typeof date === 'object' && date.toISOString().slice(0, 10) || date;
  if (!value) value = '';
  if (value.length > 0) value = new Date(value).toISOString().slice(0, 10);
  return value;
};

var SchemaForm = /*#__PURE__*/function (_Component) {
  _inheritsLoose(SchemaForm, _Component);

  function SchemaForm(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.mapper = {
      number: Number$1,
      text: Text$1,
      password: Text$1,
      textarea: TextArea$1,
      markdown: Markdown$1,
      textsuggest: TextSuggest$1,
      select: Select$1,
      taxonomy: Taxonomy$1,
      radios: Radios$1,
      date: DateComponent,
      timestamp: Timestamp$1,
      checkbox: Checkbox,
      help: Help,
      array: Array$1,
      tBoolean: TripleBoolean$1,
      fieldset: FieldSet$1,
      tuple: FieldSet$1,
      multiselect: MultiSelect$1
    };

    _this.setDefault = function (key, model, form, value) {
      var onModelChange = _this.props.onModelChange;
      var currentValue = utils.selectOrSet(key, model);
      if (isNil(currentValue) && !isNil(value)) onModelChange(key, value, form.type, form);
    };

    _this.getLocalization = function () {
      var localization = _this.props.localization;
      return {
        getLocalizedString: localization && localization.getLocalizedString ? localization.getLocalizedString : function (value) {
          return value;
        },
        getLocalizedNumber: localization && localization.getLocalizedNumber ? localization.getLocalizedNumber : function (value) {
          return value;
        },
        getLocalizedDate: localization && localization.getLocalizedDate ? localization.getLocalizedDate : formatDate
      };
    };

    _this.builder = _this.builder.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = SchemaForm.prototype;

  _proto.builder = function builder(form, model, index, mapper, onChange, _builder) {
    var _this$props = this.props,
        errors = _this$props.errors,
        showErrors = _this$props.showErrors,
        evalContext = _this$props.evalContext;
    var Field = this.mapper[form.type];

    if (!Field) {
      return null;
    }

    if (form.condition && !utils.safeEval(form.condition, _extends({
      model: model,
      form: form
    }, evalContext))) {
      return null;
    }

    var key = form.key && form.key.join('.') || index;
    var error = errors && key in errors ? errors[key] : null;
    return /*#__PURE__*/React__default.createElement(Field, {
      model: model,
      form: form,
      key: key,
      onChange: onChange,
      setDefault: this.setDefault,
      mapper: mapper,
      builder: _builder,
      errorText: error,
      localization: this.getLocalization(),
      showErrors: showErrors
    });
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props2 = this.props,
        schema = _this$props2.schema,
        form = _this$props2.form,
        ignore = _this$props2.ignore,
        option = _this$props2.option,
        model = _this$props2.model,
        className = _this$props2.className,
        onModelChange = _this$props2.onModelChange,
        mapper = _this$props2.mapper;
    var merged = utils.merge(schema, form, ignore, option);
    var mergedMapper = this.mapper;

    if (mapper) {
      mergedMapper = merge$1(this.mapper, mapper);
    }

    var forms = merged.map(function (formPart, index) {
      return _this2.builder(formPart, model, index, mergedMapper, onModelChange, _this2.builder);
    });
    return /*#__PURE__*/React__default.createElement("div", {
      className: className
    }, forms);
  };

  return SchemaForm;
}(React.Component);

SchemaForm.defaultProps = {
  localization: undefined,
  showErrors: false
};

exports.Array = Array$1;
exports.ComposedComponent = ComposedComponent;
exports.SchemaForm = SchemaForm;
exports.utils = utils;
//# sourceMappingURL=index.js.map
